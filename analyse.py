import pandas as pdimport matplotlib.pyplot as pltimport numpy as npimport seaborn as snsdef plot_bar(data = None, x_var = '', y_var = '', xlabel = '', ylabel = '', title = '', palette = None, rotation = False):    '''Plot barplot using seaborn. '''    g = sns.barplot(data = data, x = x_var, y = y_var, palette = palette)    g.set(xlabel = xlabel, ylabel = ylabel, title = title)    # rotate the xticks    if rotation == True:        plt.xticks(rotation = 90)        def groupby_count(data = None, var = None, col_choose = None, sort = True, by = None,ascending = True):    ''' Group the data and count the number of values. '''    data = data[data[col_choose].notnull()]    group = data.groupby(var)[[col_choose]].count()    if sort == True:        group = group.sort_values(by = by, ascending = ascending )    return group        def plot_line(data = None, x_var = '', y_var = '', xlabel = '', ylabel = '', title = '', palette = None, rotation = False):    ''' Plot line graph using seaborn. '''    g = sns.lineplot(data = data, x = x_var, y = y_var, palette = palette)    g.set(xlabel = xlabel, ylabel = ylabel, title = title)    if rotation == True:        plt.xticks(rotation = 90)def count_occurences(data = None, var = None, col_choose = None, sort = True,ascending = True):    ''' Count the number of occurences of the certain value'''        # Only choose row that column choosen does not contains NaN    temp = data[data[col_choose].notnull()]    temp = temp.groupby(var)[col_choose].count()        # Change the name to 'Count'    temp = temp.to_frame('Count')        temp = temp.reset_index()        # Count the number of occurences of the targeted columns    temp = temp[col_choose].value_counts(dropna = False)        # Change the series to df with specifiying a name for the values    temp = temp.to_frame('Count')        # Change index's name     temp.index.name = col_choose    if sort == True:        temp = temp.sort_values(by = 'Count', ascending = ascending)    return tempdef eventBySex_ver1(df, sex):    ''' Count the most male or female athlete's event. (version 1)'''    byEvent_Sex = df.groupby(['Event', 'Sex'])['Sex'].count()    byEvent_Sex = byEvent_Sex.to_frame('Count').sort_values(by = 'Count', ascending = False).loc[(slice(None),sex),:]    return byEvent_Sex.head(10)def eventBySex_ver2(df, sex):    ''' Count the most male or female athlete's event. (version 2)'''    byEvent_Sex = df[df['Sex'] == sex]    byEvent_Sex = byEvent_Sex.groupby(['Event', 'Sex'])['Sex'].count()    byEvent_Sex = byEvent_Sex.to_frame('Count').sort_values(by = 'Count', ascending = False)    return byEvent_Sex.head(10)# import datadf_athlete = pd.read_csv('athlete_events.csv')df_noc = pd.read_csv('noc_regions.csv')pd.set_option('display.max_columns', 500)# Join df_athlete and df_noc together as a dataframedf = df_athlete.merge(df_noc, on = 'NOC', how = 'left')df = df[df.Season == 'Summer']df.Sex = pd.Categorical(df.Sex)# sortdf.Year = pd.to_datetime(df.Year, format = '%Y')df = df.set_index('Year').sort_index()# Check nullsdf = df.drop('notes', axis = 1)df[df.isnull().any(axis = 1)]# Question 1 - Which Countries have won most medals? byCountries = groupby_count(data = df, var = 'Team', col_choose = 'Medal', sort = True, by = 'Medal', ascending = False)plot_bar(data = byCountries.head(10).reset_index(), x_var = 'Team', y_var = 'Medal', xlabel = 'Team', ylabel = 'Number of Medals', title = 'Top 10 most medals team', rotation = True)plt.yticks(np.arange(start = 0, stop = 6000, step = 500))# Question 2 - Which countries won maximum medal in one year and in which year?byYear_Countries = groupby_count(data = df, var = ['Year', 'Team'], col_choose = 'Medal', sort = True, by = 'Medal', ascending = False)plot_bar(data = byYear_Countries.head(10).reset_index(), x_var = 'Team', y_var = 'Medal', xlabel = 'Team', ylabel = 'Number of Medals', title = 'Top 10 most medals team for a Particular Year', rotation = True)# Question 3 - Create a line chart of the year-wise medal count for each of the 10 countries from 1896 to 2016?byYear_Countries_sorted = byYear_Countries.sort_index()us = byYear_Countries_sorted.loc[(slice(None), 'United States'),:]plot_line(data = us.reset_index(), x_var = 'Year', y_var = 'Medal', xlabel = 'Year', ylabel = 'Number of Medals',title = 'Number of medals each Year for United States')#  Question 4: Which cities have hosted most Olympics. Find top 5 cities?most_cities = count_occurences(data = df, var = ['Year', 'City'], col_choose = 'City', sort = True, ascending = False)plot_bar(data = most_cities.head(10).reset_index(), x_var = 'City', y_var = 'Count', xlabel = 'City', ylabel = 'Number of organized', title = 'Top 10 City Organized Most Olympics', rotation = True)# Question 5: How many events are held in olympics?num_events = df.Event.nunique()# Question 6: What is the ratio of women and men athletes in each olympic?byYear_Sex = groupby_count(df,['Year', 'Sex'], 'Sex', sort = False)# unstack Sex's indexbyYear_Sex = byYear_Sex.unstack('Sex')plt.plot(byYear_Sex.index, byYear_Sex.Sex.F, label = 'Female')plt.plot(byYear_Sex.index, byYear_Sex.Sex.M, label = 'Male')plt.legend()plt.xlabel('Year')plt.ylabel('Number of Athletes per Year')# Question 7: What are top 10 most popular sports events for men?men_sports = eventBySex_ver1(df,'M')# Question 8: What are top 10 most popular sports events for women?women_sports = eventBySex_ver1(df,'F')# Question 9: Which were the last 5 events to be included in the Olympics?df = df.reset_index()# sort the data by YearnewEvent = df[['Event', 'Year']].sort_values(by = 'Year', ascending = True)# drop duplicates event and only keep the first one and show only the last 5newEvent = newEvent.drop_duplicates(subset = ['Event'], keep = 'first').tail(5)# Question 10: Which were the last 5 events taken out from Olympic?lastevent = df[['Event', 'Year']].sort_values(by = 'Year', ascending = True)lastevent = lastevent.drop_duplicates(subset = ['Event'],keep = 'first' ).sort_values('Year', ascending = False)# filter out the event that is not available in 2016lastevent = lastevent[lastevent.Year != lastevent.Year.max()].head(10)